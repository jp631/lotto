{"ast":null,"code":"const theDates = ['2019-08-27T01:11:13.000Z', '2020-09-27T01:11:13.000Z', '2020-11-27T01:11:13.000Z', '2020-10-27T01:10:13.000Z'];\n\nfor (let i = 0; i <= theDates.length - 1; i++) {\n  let a = new Date(theDates[i]);\n  console.log(a);\n}\n\nexport const getGreaterDate = (date, dateArray) => {\n  let checkdate = new Date(date);\n  dateArray.forEach(element => {\n    new Date(date) < new Date(element) ? checkdate = new Date(date) : checkdate = new Date(element);\n  });\n  console.log('after checkdate');\n  console.log(checkdate);\n  console.log('afer checkdate');\n  return checkdate > date;\n};\ngetGreaterDate('2020-10-27T01:10:13.000Z', theDates);","map":{"version":3,"sources":["/Users/jpdeveloper/workspace/lotto/src/utils/utilFunctions.js"],"names":["theDates","i","length","a","Date","console","log","getGreaterDate","date","dateArray","checkdate","forEach","element"],"mappings":"AAAC,MAAMA,QAAQ,GAAG,CACd,0BADc,EAEd,0BAFc,EAGd,0BAHc,EAId,0BAJc,CAAjB;;AAOD,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAID,QAAQ,CAACE,MAAT,GAAgB,CAApC,EAAuCD,CAAC,EAAxC,EAA2C;AACvC,MAAIE,CAAC,GAAG,IAAIC,IAAJ,CAASJ,QAAQ,CAACC,CAAD,CAAjB,CAAR;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACH;;AAGD,OAAO,MAAMI,cAAc,GAAG,CAACC,IAAD,EAAOC,SAAP,KAAqB;AAC/C,MAAIC,SAAS,GAAG,IAAIN,IAAJ,CAASI,IAAT,CAAhB;AACAC,EAAAA,SAAS,CAACE,OAAV,CAAkBC,OAAO,IAAI;AACvB,QAAIR,IAAJ,CAASI,IAAT,CAAF,GAAqB,IAAIJ,IAAJ,CAASQ,OAAT,CAAvB,GAA6CF,SAAS,GAAG,IAAIN,IAAJ,CAASI,IAAT,CAAzD,GAA0EE,SAAS,GAAG,IAAIN,IAAJ,CAASQ,OAAT,CAAtF;AACD,GAFD;AAGAP,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYI,SAAZ;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEA,SAAOI,SAAS,GAAGF,IAAnB;AACH,CAVM;AAYPD,cAAc,CAAC,0BAAD,EAA6BP,QAA7B,CAAd","sourcesContent":[" const theDates = [\n    '2019-08-27T01:11:13.000Z',\n    '2020-09-27T01:11:13.000Z',\n    '2020-11-27T01:11:13.000Z',\n    '2020-10-27T01:10:13.000Z'\n]\n\nfor(let i = 0; i <= theDates.length-1; i++){\n    let a = new Date(theDates[i])\n    console.log(a)\n}\n\n\nexport const getGreaterDate = (date, dateArray) => {\n    let checkdate = new Date(date);\n    dateArray.forEach(element => {\n      ( ( new Date(date)) < (new Date(element)) )? checkdate = new Date(date) : checkdate = new Date(element)\n    });\n    console.log('after checkdate')\n    console.log(checkdate)\n    console.log('afer checkdate')\n\n    return checkdate > date;\n}\n\ngetGreaterDate('2020-10-27T01:10:13.000Z', theDates)\n\n"]},"metadata":{},"sourceType":"module"}